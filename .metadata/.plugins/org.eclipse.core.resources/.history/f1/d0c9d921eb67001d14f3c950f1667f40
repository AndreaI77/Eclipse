package com.andrea._15_Final;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.apache.commons.dbutils.DbUtils;

public class BaseDatos {
	
	public static boolean recargarTablas(Propiedades prop, List<Joke> lista) {
		Connection con = null;
		ResultSet rs = null;
		
		int id_language = 0, id_type = 0, id_category = 0;
		List<Integer> id_flags = new ArrayList<Integer>();
		int cant = 0;
		int contador = 0;
		
		String [] tablas = {"joke_flags", "joke","flags","category","language", "types"};
		try {
			con = Conexion.makeConnection();
			Statement statement = con.createStatement();
			
			for(int i= 0; i<tablas.length;i++) {
				
				int cantidad = statement.executeUpdate("DELETE FROM "+tablas[i]+";");
				System.out.println("Se han borrado "+cantidad+" filas de la tabla "+tablas[i]);
			}
			for(int i=2 ; i<tablas.length; i++) {
			System.out.println("Cargando datos en la tabla "+tablas[i] +" .........");
				
				switch(tablas[i]) {
					case "flags": 
						contador = 0;
							for(int j =0; j< prop.getFlags().size();j++) {
								cant = statement.executeUpdate("INSERT INTO flags (id,name) VALUES("+j+",'"+prop.getFlags().get(j)+"');");
								if(cant == 1) {
									contador ++;
								}
							}
							System.out.println("Se han insertado "+contador+" registros en la tabla flags");
							break;
							
					case "category":
						contador = 0;
							for(int j =0; j< prop.getCategories().size();j++) {
								cant = statement.executeUpdate("INSERT INTO category (id,name) VALUES("+j+",'"+prop.getCategories().get(j)+"');");
								if(cant == 1) {
									contador ++;
								}
							}
							System.out.println("Se han insertado "+contador+" registros en la tabla category");
							break;
					case "types":
						contador = 0;
						for(int j =0; j< prop.getTypes().size();j++) {
							cant = statement.executeUpdate("INSERT INTO types (id,type) VALUES("+j+",'"+prop.getTypes().get(j)+"');");
							if(cant == 1) {
								contador ++;
							}
						}
						System.out.println("Se han insertado "+contador+" registros en la tabla types");
						break;
						
					case "language":
						contador = 0;
						for(int j =0; j< prop.getIdiomas().size();j++) {
							cant = statement.executeUpdate("INSERT INTO language (id,name) VALUES("+j+",'"+prop.getIdiomas().get(j)+"');");
							if(cant == 1) {
								contador ++;
							}
						}
						System.out.println("Se han insertado "+contador+" registros en la tabla language");
						break;
				}
			}
			for(Joke joke : lista) {
				cant = 0;
				contador = 0;
				id_language = 0;
				id_type = 0;
				id_category = 0;
				id_flags.clear();
				
				rs= statement.executeQuery("SELECT * FROM category;");
				while(rs.next()) {
					//System.out.println(rs.getString(2)+"es igual "+joke.getCategory()+rs.getInt(1));
					if(rs.getString(2).equals(joke.getCategory())){
						id_category = rs.getInt(1);
					}
				}
				
				rs= statement.executeQuery("SELECT * FROM types;");
				while(rs.next()) {
					if(rs.getString(2).equals(joke.getType())){
						id_type = rs.getInt(1);
					}
				}
				
				rs= statement.executeQuery("SELECT * FROM language;");
				while(rs.next()) {
					if(rs.getString(2).equals(joke.getLang())){
						id_language = rs.getInt(1);
					}
				}
				
				rs= statement.executeQuery("SELECT * FROM flags;");
				while(rs.next()) {
	
				// recorro map de  joke, comparo los flags, busco los que son true e inserto su id en la lista.
					for(String key : joke.getFlags().keySet()) {
						if(rs.getString(2).equals(key) && joke.getFlags().get(key)== true){
							id_flags.add(rs.getInt(1));
						}
					}
					
				}
				
				String sql =("INSERT INTO joke (id, text, text2,id_language, id_type, id_category) VALUES"
						+ "("+joke.getId()+","
								+ "$text$"+joke.getText()+"$text$,$text2$"+joke.getText2()+"$text2$,"+id_language+","+id_type+","+ id_category+");");
				
				cant = statement.executeUpdate(sql);
				contador++;
				if(id_flags.size() != 0) {
					for(int idf : id_flags) {
						cant = statement.executeUpdate("INSERT INTO joke_flags (id_jokes,id_language, id_flags) VALUES("+joke.getId()+","+id_language+","+idf+");");
					}
				}
	
			}
			statement.close();
			System.out.println("Se han insertado "+contador+ " chistes en la tabla jokes");
			return true;
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}finally {
			DbUtils.closeQuietly(con);
			DbUtils.closeQuietly(rs);
			//DbUtils.closeQuietly(statement);
			
		}
		
	}
	
	public static boolean insertarChisteStatement() {
		Connection con = null;
		ResultSet rs = null;
		Scanner sc = new Scanner(System.in);
		
		int id_language = 0, id_type = 0, id_category = 0, id_chiste = 0;
		String text= "", text2 = "", flag="", scan="";
		List<Integer> id = new ArrayList<Integer>();
		int cant = 0;
		boolean res = false;
		try {
			con = Conexion.makeConnection();
			Statement statement = con.createStatement();
			
			while(!res) {
				System.out.println("Escribe el numero de la categoría:" );
				rs= statement.executeQuery("SELECT * FROM category;");
				while(rs.next()) {
					System.out.println(rs.getInt(1)+". "+rs.getString(2));
					id.add(rs.getInt(1));
				}
				scan = sc.next();
				try {
					id_category= Integer.parseInt(scan);
					res= true;
				}catch(Exception e) {
					System.out.println("No es un número");
					System.out.println();
					res=false;
				}
				if( !id.contains(id_category)) {
					System.out.println("No es un número válido.");
					System.out.println();
					res=false;
					id.clear();
				}
			}
			res=false;
			id.clear();
			while(!res) {
				System.out.println("Escribe el numero del typo:" );
				rs= statement.executeQuery("SELECT * FROM types;");
				while(rs.next()) {
					System.out.println(rs.getInt(1)+". "+rs.getString(2));
					id.add(rs.getInt(1));
				}
				scan = sc.next();
				try {
					id_type= Integer.parseInt(scan);
					res= true;
				}catch(Exception e) {
					System.out.println("No es un número");
					System.out.println();
					res=false;
				}
				if( !id.contains(id_type)) {
					System.out.println("No es un número válido.");
					System.out.println();
					res=false;
					id.clear();
				}
			}
			sc.nextLine();
			System.out.println("Inserta el texto del chiste: ");
			
			text = sc.nextLine();
			if(id_type == 1) {
				System.out.println("Inserta el segundo texto: ");
				
				text2 = sc.nextLine();
			}
			
			res=false;
			id.clear();
		
			while(!res) {
				System.out.println("Escribe el numero del idioma:" );
				rs= statement.executeQuery("SELECT * FROM language;");
				while(rs.next()) {
					System.out.println(rs.getInt(1)+". "+rs.getString(2));
					id.add(rs.getInt(1));
				}
				scan = sc.next();
				try {
					id_language= Integer.parseInt(scan);
					res= true;
				}catch(Exception e) {
					System.out.println("No es un número");
					System.out.println();
					res=false;
				}
				if( !id.contains(id_language)) {
					System.out.println("No es un número válido.");
					System.out.println();
					res=false;
					id.clear();
				}
			}
			res=false;
			id.clear();
		
			
				System.out.println("Ahora vamos a ver los flags del chiste:" );
				rs= statement.executeQuery("SELECT * FROM flags;");
				while(rs.next()) {
					res=false;
					while(!res) {
						System.out.println("Es el chiste de este tipo?  '"+rs.getString(2)+"'  \nResponde: s/n");
						flag = sc.next();
						if (flag.toLowerCase().equals("s") || flag.toLowerCase().equals("n")) {
							if(flag.toLowerCase().equals("s")) {
								id.add(rs.getInt(1));
							}
							res=true;
						}else {
							res=false;
							System.out.println("Respuesta incorrecta: ");
						}
					
					}
			}
			rs= statement.executeQuery("SELECT MAX(id) FROM joke where id_language = "+id_language+";");
			while(rs.next()) {
				id_chiste= rs.getInt(1);
			}
			id_chiste++;
			String sql =("INSERT INTO joke (id, text, text2,id_language, id_type, id_category) VALUES"
					+ "("+id_chiste+",$text$"+text+"$text$,$text2$"+text2+"$text2$,"+id_language+","+id_type+","+ id_category+");");
			
			cant = statement.executeUpdate(sql);
			if(id.size() != 0) {
				for(int idf : id) {
					cant = statement.executeUpdate("INSERT INTO joke_flags (id_jokes,id_language, id_flags) VALUES("
							+id_chiste+","+id_language+","+idf+");");
				}
			}

		statement.close();
		return true;
	
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}finally {
			DbUtils.closeQuietly(con);
			DbUtils.closeQuietly(rs);
			
			
		}
		
	}
	
	public static boolean insertarChistePreparedStatement() {
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps= null;
		
		int id_language = 0, id_type = 0, id_category = 0, id_chiste = 0;
		String text= "", text2 = "", flag="", scan="";
		List<Integer> id = new ArrayList<Integer>();
		int cant = 0;
		boolean res = false;
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		try {
			con = Conexion.makeConnection();
			
			
			while(!res) {
				System.out.println("Escribe el numero de la categoría:" );
				ps = con.prepareStatement("SELECT * FROM category;");
				rs= ps.executeQuery();
				while(rs.next()) {
					System.out.println(rs.getInt(1)+". "+rs.getString(2));
					id.add(rs.getInt(1));
				}
				scan = br.readLine();
				try {
					id_category= Integer.parseInt(scan.trim());
					res= true;
				}catch(Exception e) {
					System.out.println("No es un número");
					System.out.println();
					res=false;
				}
				if( !id.contains(id_category)) {
					System.out.println("No es un número válido.");
					System.out.println();
					res=false;
					id.clear();
				}
			}
			res=false;
			id.clear();
			while(!res) {
				System.out.println("Escribe el numero del typo:" );
				ps= con.prepareStatement("SELECT * FROM types;");
				rs= ps.executeQuery();
				while(rs.next()) {
					System.out.println(rs.getInt(1)+". "+rs.getString(2));
					id.add(rs.getInt(1));
				}
				scan = br.readLine();
				try {
					id_type= Integer.parseInt(scan);
					res= true;
				}catch(Exception e) {
					System.out.println("No es un número");
					System.out.println();
					res=false;
				}
				if( !id.contains(id_type)) {
					System.out.println("No es un número válido.");
					System.out.println();
					res=false;
					id.clear();
				}
			}
			
			System.out.println("Inserta el texto del chiste: ");
			
			text = br.readLine();
			if(id_type == 1) {
				System.out.println("Inserta el segundo texto: ");
				
				text2 = br.readLine();
			}
			
			res=false;
			id.clear();
		
			while(!res) {
				System.out.println("Escribe el numero del idioma:" );
				ps=con.prepareStatement("SELECT * FROM language;");
				rs= ps.executeQuery();
				while(rs.next()) {
					System.out.println(rs.getInt(1)+". "+rs.getString(2));
					id.add(rs.getInt(1));
				}
				scan = br.readLine();
				try {
					id_language= Integer.parseInt(scan);
					res= true;
				}catch(Exception e) {
					System.out.println("No es un número");
					System.out.println();
					res=false;
				}
				if( !id.contains(id_language)) {
					System.out.println("No es un número válido.");
					System.out.println();
					res=false;
					id.clear();
				}
			}
			res=false;
			id.clear();
		
			
				System.out.println("Ahora vamos a ver los flags del chiste:" );
				ps=con.prepareStatement("SELECT * FROM flags;");
				rs= ps.executeQuery();
				while(rs.next()) {
					res=false;
					while(!res) {
						System.out.println("Es el chiste de este tipo?  '"+rs.getString(2)+"'  \nResponde: s/n");
						flag = br.readLine();
						if (flag.toLowerCase().trim().equals("s") || flag.toLowerCase().trim().equals("n")) {
							if(flag.toLowerCase().equals("s")) {
								id.add(rs.getInt(1));
							}
							res=true;
						}else {
							res=false;
							System.out.println("Respuesta incorrecta: ");
						}
					
					}
			}
			ps=con.prepareStatement("SELECT MAX(id) FROM joke where id_language = ? ;");
			ps.setInt(1, id_language);
			rs= ps.executeQuery();
			while(rs.next()) {
				id_chiste= rs.getInt(1);
			}
			id_chiste++;
//			ps =con.prepareStatement("INSERT INTO joke (id, text, text2,id_language, id_type, id_category) VALUES"
//					+ "("+id_chiste+",$text$"+text+"$text$,$text2$"+text2+"$text2$,"+id_language+","+id_type+","+ id_category+");");
//			
			ps =con.prepareStatement("INSERT INTO joke (id, text, text2,id_language, id_type, id_category) VALUES(?,?,?,?,?,?);");
			ps.setInt(1, id_chiste);
			ps.setString(2, text);
			ps.setString(3, text2);
			ps.setInt(4, id_language);
			ps.setInt(5, id_type);
			ps.setInt(6, id_category);
			
			cant = ps.executeUpdate();
			if(id.size() != 0) {
				for(int idf : id) {
//					cant = ps.executeUpdate("INSERT INTO joke_flags (id_jokes,id_language, id_flags) VALUES("
//							+id_chiste+","+id_language+","+idf+");");
					ps=con.prepareStatement("INSERT INTO joke_flags (id_jokes,id_language, id_flags) VALUES(?,?,?);");
					ps.setInt(1, id_chiste);
					ps.setInt(2, id_language);
					ps.setInt(3, idf);
				   cant= ps.executeUpdate();
				}
			}

		
		return true;
	
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return false;
		}finally {
			DbUtils.closeQuietly(ps);
			DbUtils.closeQuietly(rs);
			DbUtils.closeQuietly(con);
			
		}
		
	}

	public static void buscarTexto() {
		Connection con = null;
		CallableStatement stmt = null;
		ResultSet rs=null;
		Scanner sc= null;
		List<String> flags = new ArrayList<String>();
		
		String text="", idioma = "";
		int id =0, id_language=0;
		 try {
			 sc = new Scanner(System.in);
			 System.out.println("Inserta el texto a buscar: ");
			  text = sc.nextLine();
			  
			con = Conexion.makeConnection();
			stmt = con.prepareCall("{call obtener_flags()}");
			rs = stmt.executeQuery();
			while(rs.next()) {
				flags.add(rs.getString(1));
			}
			stmt = con.prepareCall("{call buscar_texto2('%"+ text+"%')}");
			rs = stmt.executeQuery();
			while(rs.next()) {
//				System.out.println("Idioma: "+rs.getString(3)+", Categoría: "+rs.getString(4));
//				System.out.println(rs.getString(7));
//				if(rs.getString(5).equals("twopart")) {
//					System.out.println(rs.getString(8));
//				}
//				System.out.println();
				
				if( idioma.equals("")) {
					System.out.println("id: "+rs.getInt(1));
					System.out.println("Idioma: "+rs.getString(3)+", Categoría: "+rs.getString(4));
					System.out.println(rs.getString(7));
					if(rs.getString(5).equals("twopart")) {
						System.out.println(rs.getString(8));
					}
					System.out.println("Flags: ");
					if(rs.getObject(6) != null) {
						System.out.println(flags.get(rs.getInt(6)));
				
					}else {
						System.out.println("no tiene");
					}
					id= rs.getInt(1);
					id_language = rs.getInt(2);
					idioma = rs.getString(3);
					System.out.println("Idioma: "+rs.getString(3)+", Categoría: "+rs.getString(4));
					System.out.println(rs.getString(7));
					if(rs.getString(5).equals("twopart")) {
						System.out.println(rs.getString(8));
					}
					System.out.println("Flags: ");
					if(rs.getObject(6) != null) {
						System.out.println(rs.getInt(6));
					}else {
						System.out.println("no tiene");
					}
					
				}else if(id == rs.getInt(1) && id_language == rs.getInt(2) && idioma.equals(rs.getString(3))) {
					if(rs.getObject(6) != null) {
						System.out.println(rs.getInt(6));
						
					}
					
				}else {
					idioma = "";
					System.out.println("id: "+rs.getInt(1));
					System.out.println("Idioma: "+rs.getString(3)+", Categoría: "+rs.getString(4));
					System.out.println(rs.getString(7));
					if(rs.getString(5).equals("twopart")) {
						System.out.println(rs.getString(8));
					}
					System.out.println("Flags: ");
					if(rs.getObject(6) != null) {
						System.out.println(flags.get(rs.getInt(6)));
					}else {
						System.out.println("no tiene");
					}
					System.out.println();
				}
//				if(id == rs.getInt(1) && id_language == rs.getInt(2) && !idioma.equals(rs.getString(3))){
//					System.out.println("Idioma: "+idioma+", Categoría: "+categoria);
//					System.out.print("Flags: ");
//					if(flags_id.size()>0 ) {
//						for(int flag : flags_id)
//						System.out.print(flag+", ");
//
//					}else {
//						System.out.print("no tiene");
//					}
//					System.out.println();
//					System.out.println(text1);
//					if(tipo.equals("twopart")) {
//						System.out.println(text2);
//					}
//					idioma = "";
//				}
				
			}
			
//			while(rs.next()) {
//				System.out.println("Idioma: "+rs.getString(3)+", Categoría: "+rs.getString(4));
//				System.out.println(rs.getString(6));
//				if(rs.getString(5).equals("twopart")) {
//					System.out.println(rs.getString(7));
//				}
//				System.out.println();
//			}
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			DbUtils.closeQuietly(rs);
			DbUtils.closeQuietly(stmt);
			DbUtils.closeQuietly(con);
		}
		
	}
	public static void buscarChistesSinFlags() {
		Connection con = null;
		CallableStatement stmt = null;
		ResultSet rs=null;
		
		 try {
			
			con = Conexion.makeConnection();
			stmt = con.prepareCall("{call buscar_chiste_sin_flag()}");
			rs = stmt.executeQuery();
			
			while(rs.next()) {
				System.out.println("Idioma: "+rs.getString(3)+", Categoría: "+rs.getString(4));
				System.out.println(rs.getString(6));
				if(rs.getString(5).equals("twopart")) {
					System.out.println(rs.getString(7));
				}
				System.out.println();
			}
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			DbUtils.closeQuietly(rs);
			DbUtils.closeQuietly(stmt);
			DbUtils.closeQuietly(con);
		}
		
	}

}

